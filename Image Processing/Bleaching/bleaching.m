% Photobleaching analysis
% Assuming this code and multi-frame .tif files are in same dir
% First run convert_batch_tif in same dir to create the stacked .tif files
% (following batch conversion in Andor)
% SRL 090406

% To analyze overall photobleaching

pathnm = pwd;

fileName=tiffnames; %cell array storing list of tiff frames

%loop over fileName list

colors= ['k', 'r', 'y', 'g', 'c', 'b', 'm'];
numcol=length(colors);
nFiles=length(tiffnames)

figure(1);

% CUSTOM SECTION (PER DATA SET / FOLDER) (also see figure legend (list) below) 

% --------------------------------
%sample C
%reading xy coordinates and light levels (2 V =high; 3.6 V =low)
%reading gain and timestep
%considering only the many-frame bleaching movies

minsig=.4
shutteroffset=20;
ignorefirst=110;

xpos=[0,0,-2400,0,2400];
ypos=[1200,2400,0,-2400,0];
lightlevel=[2,2,2,3.6,3.6];
gain=[50,150,150,300,300];
timestep=[.3,.3,.3,.3,.3];

% --------------------------------

Nbleaching=length(xpos);
fitoffset=zeros(1,Nbleaching); %to store fit parameters
fitrate=zeros(1,Nbleaching);
fittime=zeros(1,Nbleaching);
minIntens=zeros(1,Nbleaching);

strlabel = cell(1,Nbleaching); %for legend

expplusconstfittype = fittype('a + (1-a)*exp(-k * t)','coefficients',{'a','k'},'independent','t');
countup=0;

for iFile = 1:nFiles

    a=imfinfo(tiffnames{iFile},'tif');
    nFrames=length(a); %gives number of frames
    %nFrames=numframes(iFile); %(generated by convert_batch_tif.m on first run)

    sizeX=512;%a(iFile).Width;
    sizeY=512;%a(iFile).Height;

    %interested in files with large number of frames: studies of bleaching
    
    
    if (nFrames>100)
        countup=countup+1;
        strlabel{countup}=['x=',num2str(xpos(countup)),',y=',num2str(ypos(countup)),',V=',num2str(lightlevel(countup))]; 
        
        filenm=[pathnm,'\',fileName{iFile}]
        data = loadTIFFs(filenm, sizeX, sizeY, nFrames);
        data=data/gain(countup);
        meanIntens = squeeze(mean((mean(data, 1)), 2));

        
        nFramesUse=nFrames-shutteroffset+1;
        meanIntensUse=meanIntens(shutteroffset:length(meanIntens));
        maxval=max(meanIntensUse);
        
        meanIntensUse=meanIntensUse/maxval; % normalize (initial value of 1 matches fitter)
        
        timevals=timestep(countup)*(1:nFramesUse);
        
       lentofit=length(timevals);
       
       keepsecond=lentofit-ignorefirst;
       weightmask=cat(2,zeros(1,ignorefirst),ones(1,keepsecond));
        
        
        curvefits=fit(timevals',meanIntensUse,expplusconstfittype,'lower',[0.,0.],'upper',[.5,inf],'startpoint',[minsig,1/10])%,'Weights',weightmask);

        fitoffset(countup)=curvefits.a;
        fitrate(countup)=curvefits.k;
        fittime(countup)=1/(curvefits.k);
        minIntens(countup)=min(meanIntensUse);
        
        %plot fit
        %normalize by gain
        
        %plot(1:nFramesUse, meanIntensUse, colors(mod(iFile, length(colors))+1))
        col=colors(mod(countup, numcol)+1);
        plot(timevals, meanIntensUse, [col,'o'],timevals, curvefits(timevals), col);
        %semilogy(timevals, meanIntensUse, [col,'o'],timevals, curvefits(timevals), col);
        
        hold on
        clear data meanIntens
        clear data meanIntensUse
        clear data curvefits
    end
end
    xlabel('Time (s)')
    ylabel('Intensity/Gain')
    legend(strlabel{1},strlabel{1},strlabel{2},strlabel{2},strlabel{3},strlabel{3},strlabel{4},strlabel{4},strlabel{5},strlabel{5}) %manual


% output

xpos
ypos
lightlevel
fitoffset
%fitrate
fittime
minIntens
ones(1,length(minIntens))-minIntens
