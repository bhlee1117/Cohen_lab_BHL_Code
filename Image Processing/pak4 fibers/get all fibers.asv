cd 'X:\Lab\Labmembers\Dingchang Lin\Data\HCBI\20220109\';

dList = dir('int_*');
nDir = length(dList);
ySize = 2048; xSize = 2048;

theta = [0:179];
fibW = 2; % fiber width, pixels
dW = 5*fibW; % Width of segment to take around each fiber
minL = 50; % minimum fiber length, pixels
maxL = 600; % maximum fiber length, pixels.  Use an even number.


% Get one picture from each directory just to check that it looks ok.
for d = 1:nDir;  % Go through all the directories
    cd(dList(d).name);
    fList = dir('*low_Unmixing.czi');
    nFiles = length(fList);
    for f = 1;  % go through all the unmixed files in each directory
        fName = fList(f).name;
        dat = bfopen(fName);  % open one Unmixed image.
        nChan = size(dat, 2)
        ['number of channels ' num2str(nChan)]
        omeMeta = dat{1,4};
        voxelSizeX = omeMeta.getPixelsPhysicalSizeX(0).value(ome.units.UNITS.MICROMETER); % in µm
        pixSize = voxelSizeX.doubleValue();
        [d pixSize]
        [ySize, xSize] = size(dat{1}{1,1});  % image dimensions
        colorImg = zeros(ySize, xSize, 3);
        for j = 1:3;
            colorImg(:,:,j) = mat2gray(double(dat{1}{j,1}));  % make a 3-color image
        end;
        figure(d); clf
        imshow2(colorImg)
    end;
cd ..
end;

%extract all the fibers
for d = 1:nDir;  % Go through all the directories
    cd(dList(d).name);
    fList = dir('*low_Unmixing.czi');
    nFiles = length(fList);
    for f = 5:nFiles;  % go through all the unmixed files in each directory
        fName = fList(f).name;
        dat = bfopen(fName);  % open each Unmixed image.
        omeMeta = dat{1,4};
        voxelSizeX = omeMeta.getPixelsPhysicalSizeX(0).value(ome.units.UNITS.MICROMETER); % in µm
        pixSize = voxelSizeX.doubleValue();
        [ySize, xSize] = size(dat{1}{1,1});  % image dimensions
        colorImg = zeros(ySize, xSize, 3);
        for j = 1:3;
            colorImg(:,:,j) = mat2gray(double(dat{1}{j,1}));  % make a 3-color image
        end;
        figure(f); clf
        imshow2(colorImg); hold all
        refImg = max(colorImg(:,:,2:3),[], 3);  % define a one-color reference image for finding fibers.
        clear fibs
        fibs = findFib(refImg, colorImg, fibW, minL, maxL, dW);
        figure(f); hold all
        nFib = length(fibs);
        for j = 1:nFib;
            plot(fibs(j).X, fibs(j).Y, 'g-');
        end;
        hold off
        saveas(gca, [fName(1:end-16) '_fibs.fig'])
        saveas(gca, [fName(1:end-16) '_fibs.png'])
        allFibs{d,f} = fibs;
        save([fName(1:end-16) '_fibs.mat'], 'pixSize', 'ySize', 'xSize', 'colorImg', 'fibs', 'fibW', 'minL', 'maxL', 'dW');
    end;
    cd ..
end;
save('allImgFibs.mat', pixSize, ySize, xSize, colorImg, allFibs, fibW, minL, maxL, dW


figure(1); clf
imshow2(colorImg); hold all
for j = 1:fibC;
    pic = getOneFib(allX0(j,:), allY0(j,:), 10, refImg);
    figure(1)
    plot(allX0(j,:), allY0(j,:), 'g-');
    figure(2);
    imshow2(mat2gray(pic))
    title(num2str(j))
    pause
end;

fibs = findFib(refImg, colorImg, fibW, minL, maxL, dW);

%                     subMov = colorImg(yMin:yMax,xMin:xMax,:);
%                     img2 = imrotate(subMov, -qM+90, 'bilinear');
%                     [ySize2, xSize2, ~] = size(img2);
% 
%                     % geometry to rotate the line
%                     xRel = X - xCent;
%                     yRel = Y - yCent;
%                     rotMat = [cosd(qM-90) -sind(qM-90); sind(qM-90) cosd(qM-90)];
%                     coordsF = rotMat*([xRel; yRel]);
%                     XF = coordsF(1,:) + xSize2/2;
%                     YF = coordsF(2,:) + ySize2/2;
%                     dW = 10;
%                     yBot = max(YF(1)-dW, 1);
%                     yTop = min(YF(1)+dW, ySize2);

            
            
            
            

        % Extract the profile of the line, averaging over a stripe of width
        % 2*dW+1
            dW = 2; % number of pixels to average on either side of the line;
            tmp = [];
            for k = -dW:dW;
                x1 = xCent + (rM+k)*cosd(qM);  % coordinates of closest approach to center
                y1 = yCent - (rM+k)*sind(qM);  
                plot([x1 - L*cosd(qM+90), x1 + L*cosd(qM+90)], [y1 + L*sind(qM + 90), y1 - L*sind(qM + 90)], 'b-')
                if k == -dW;
                    tmp = (1/(2*dW+1))*improfile(subImg, [x1 - L*cosd(qM+90), x1 + L*cosd(qM+90)], [y1 + L*sind(qM + 90), y1 - L*sind(qM + 90)]);
                else
                    tmp = tmp + (1/(2*dW+1))*improfile(subImg, [x1 - L*cosd(qM+90), x1 + L*cosd(qM+90)], [y1 + L*sind(qM + 90), y1 - L*sind(qM + 90)]);
                end;
            end;
        % background subtraction
        for k = [-dW-3 -dW-2 dW+2 dW+3];
            x1 = xCent + (rM+k)*cosd(qM);  % coordinates of closest approach to center
            y1 = yCent - (rM+k)*sind(qM); 
            plot([x1 - L*cosd(qM+90), x1 + L*cosd(qM+90)], [y1 + L*sind(qM + 90), y1 - L*sind(qM + 90)], 'm-')
            tmp = tmp - (1/4)*improfile(subImg, [x1 - L*cosd(qM+90), x1 + L*cosd(qM+90)], [y1 + L*sind(qM + 90), y1 - L*sind(qM + 90)]);
        end;
        hold off
        
        
        
        profile{j} = tmp;
        subplot(1,3,3);
        plot((1:length(profile{j}))*pixSize, profile{j});
        xlabel('Position (\mum)')
        title('Line profile')
        pbaspect([1 1 1])
        
        
    end;
        
end;
